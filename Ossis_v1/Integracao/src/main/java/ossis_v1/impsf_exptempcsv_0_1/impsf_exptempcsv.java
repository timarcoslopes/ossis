// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ossis_v1.impsf_exptempcsv_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: impsf_exptempcsv Purpose: <br>
 * Description: Importa Oportunidades cuja fase seja Closed Won e não tenha sido upada ainda no ERP. Exporta para um CSV temporário <br>
 * @author test@talend.com
 * @version 6.0.1.20150908_1633
 * @status 
 */
public class impsf_exptempcsv implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "impsf_exptempcsv";
	private final String projectName = "OSSIS_V1";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					impsf_exptempcsv.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(impsf_exptempcsv.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSalesforceInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class exportando_prodsStruct implements
			routines.system.IPersistableRow<exportando_prodsStruct> {
		final static byte[] commonByteArrayLock_OSSIS_V1_impsf_exptempcsv = new byte[0];
		static byte[] commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[0];

		public String OpportunityId;

		public String getOpportunityId() {
			return this.OpportunityId;
		}

		public String Product2Name__c;

		public String getProduct2Name__c() {
			return this.Product2Name__c;
		}

		public String Quantidade_integracao__c;

		public String getQuantidade_integracao__c() {
			return this.Quantidade_integracao__c;
		}

		public Double Valor_unitario_com_desconto__c;

		public Double getValor_unitario_com_desconto__c() {
			return this.Valor_unitario_com_desconto__c;
		}

		public String HospitalID__c;

		public String getHospitalID__c() {
			return this.HospitalID__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OSSIS_V1_impsf_exptempcsv.length) {
					if (length < 1024
							&& commonByteArray_OSSIS_V1_impsf_exptempcsv.length == 0) {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[1024];
					} else {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OSSIS_V1_impsf_exptempcsv, 0,
						length);
				strReturn = new String(
						commonByteArray_OSSIS_V1_impsf_exptempcsv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OSSIS_V1_impsf_exptempcsv) {

				try {

					int length = 0;

					this.OpportunityId = readString(dis);

					this.Product2Name__c = readString(dis);

					this.Quantidade_integracao__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valor_unitario_com_desconto__c = null;
					} else {
						this.Valor_unitario_com_desconto__c = dis.readDouble();
					}

					this.HospitalID__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OpportunityId, dos);

				// String

				writeString(this.Product2Name__c, dos);

				// String

				writeString(this.Quantidade_integracao__c, dos);

				// Double

				if (this.Valor_unitario_com_desconto__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_unitario_com_desconto__c);
				}

				// String

				writeString(this.HospitalID__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OpportunityId=" + OpportunityId);
			sb.append(",Product2Name__c=" + Product2Name__c);
			sb.append(",Quantidade_integracao__c=" + Quantidade_integracao__c);
			sb.append(",Valor_unitario_com_desconto__c="
					+ String.valueOf(Valor_unitario_com_desconto__c));
			sb.append(",HospitalID__c=" + HospitalID__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(exportando_prodsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_OSSIS_V1_impsf_exptempcsv = new byte[0];
		static byte[] commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[0];

		public String OpportunityId;

		public String getOpportunityId() {
			return this.OpportunityId;
		}

		public String Id;

		public String getId() {
			return this.Id;
		}

		public Integer SortOrder;

		public Integer getSortOrder() {
			return this.SortOrder;
		}

		public String PricebookEntryId;

		public String getPricebookEntryId() {
			return this.PricebookEntryId;
		}

		public double Quantity;

		public double getQuantity() {
			return this.Quantity;
		}

		public Double Discount;

		public Double getDiscount() {
			return this.Discount;
		}

		public Double Subtotal;

		public Double getSubtotal() {
			return this.Subtotal;
		}

		public Double TotalPrice;

		public Double getTotalPrice() {
			return this.TotalPrice;
		}

		public Double UnitPrice;

		public Double getUnitPrice() {
			return this.UnitPrice;
		}

		public Double ListPrice;

		public Double getListPrice() {
			return this.ListPrice;
		}

		public java.util.Date ServiceDate;

		public java.util.Date getServiceDate() {
			return this.ServiceDate;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public java.util.Date LastModifiedDate;

		public java.util.Date getLastModifiedDate() {
			return this.LastModifiedDate;
		}

		public String LastModifiedById;

		public String getLastModifiedById() {
			return this.LastModifiedById;
		}

		public java.util.Date SystemModstamp;

		public java.util.Date getSystemModstamp() {
			return this.SystemModstamp;
		}

		public boolean IsDeleted;

		public boolean getIsDeleted() {
			return this.IsDeleted;
		}

		public Double Valor_unitario_com_desconto__c;

		public Double getValor_unitario_com_desconto__c() {
			return this.Valor_unitario_com_desconto__c;
		}

		public Double Quantidade_cotada__c;

		public Double getQuantidade_cotada__c() {
			return this.Quantidade_cotada__c;
		}

		public Double Quantidade_consumida__c;

		public Double getQuantidade_consumida__c() {
			return this.Quantidade_consumida__c;
		}

		public String Quantidade_integracao__c;

		public String getQuantidade_integracao__c() {
			return this.Quantidade_integracao__c;
		}

		public Double Valor_consumido__c;

		public Double getValor_consumido__c() {
			return this.Valor_consumido__c;
		}

		public Double Valor_a_ser_enviado__c;

		public Double getValor_a_ser_enviado__c() {
			return this.Valor_a_ser_enviado__c;
		}

		public Double Preco__c;

		public Double getPreco__c() {
			return this.Preco__c;
		}

		public String Product2Name__c;

		public String getProduct2Name__c() {
			return this.Product2Name__c;
		}

		public String HospitalID__c;

		public String getHospitalID__c() {
			return this.HospitalID__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OSSIS_V1_impsf_exptempcsv.length) {
					if (length < 1024
							&& commonByteArray_OSSIS_V1_impsf_exptempcsv.length == 0) {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[1024];
					} else {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OSSIS_V1_impsf_exptempcsv, 0,
						length);
				strReturn = new String(
						commonByteArray_OSSIS_V1_impsf_exptempcsv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OSSIS_V1_impsf_exptempcsv) {

				try {

					int length = 0;

					this.OpportunityId = readString(dis);

					this.Id = readString(dis);

					this.SortOrder = readInteger(dis);

					this.PricebookEntryId = readString(dis);

					this.Quantity = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.Discount = null;
					} else {
						this.Discount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Subtotal = null;
					} else {
						this.Subtotal = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalPrice = null;
					} else {
						this.TotalPrice = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UnitPrice = null;
					} else {
						this.UnitPrice = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ListPrice = null;
					} else {
						this.ListPrice = dis.readDouble();
					}

					this.ServiceDate = readDate(dis);

					this.Description = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.LastModifiedDate = readDate(dis);

					this.LastModifiedById = readString(dis);

					this.SystemModstamp = readDate(dis);

					this.IsDeleted = dis.readBoolean();

					length = dis.readByte();
					if (length == -1) {
						this.Valor_unitario_com_desconto__c = null;
					} else {
						this.Valor_unitario_com_desconto__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantidade_cotada__c = null;
					} else {
						this.Quantidade_cotada__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantidade_consumida__c = null;
					} else {
						this.Quantidade_consumida__c = dis.readDouble();
					}

					this.Quantidade_integracao__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valor_consumido__c = null;
					} else {
						this.Valor_consumido__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Valor_a_ser_enviado__c = null;
					} else {
						this.Valor_a_ser_enviado__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Preco__c = null;
					} else {
						this.Preco__c = dis.readDouble();
					}

					this.Product2Name__c = readString(dis);

					this.HospitalID__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OpportunityId, dos);

				// String

				writeString(this.Id, dos);

				// Integer

				writeInteger(this.SortOrder, dos);

				// String

				writeString(this.PricebookEntryId, dos);

				// double

				dos.writeDouble(this.Quantity);

				// Double

				if (this.Discount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Discount);
				}

				// Double

				if (this.Subtotal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Subtotal);
				}

				// Double

				if (this.TotalPrice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TotalPrice);
				}

				// Double

				if (this.UnitPrice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.UnitPrice);
				}

				// Double

				if (this.ListPrice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ListPrice);
				}

				// java.util.Date

				writeDate(this.ServiceDate, dos);

				// String

				writeString(this.Description, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// java.util.Date

				writeDate(this.LastModifiedDate, dos);

				// String

				writeString(this.LastModifiedById, dos);

				// java.util.Date

				writeDate(this.SystemModstamp, dos);

				// boolean

				dos.writeBoolean(this.IsDeleted);

				// Double

				if (this.Valor_unitario_com_desconto__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_unitario_com_desconto__c);
				}

				// Double

				if (this.Quantidade_cotada__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Quantidade_cotada__c);
				}

				// Double

				if (this.Quantidade_consumida__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Quantidade_consumida__c);
				}

				// String

				writeString(this.Quantidade_integracao__c, dos);

				// Double

				if (this.Valor_consumido__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_consumido__c);
				}

				// Double

				if (this.Valor_a_ser_enviado__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_a_ser_enviado__c);
				}

				// Double

				if (this.Preco__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Preco__c);
				}

				// String

				writeString(this.Product2Name__c, dos);

				// String

				writeString(this.HospitalID__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OpportunityId=" + OpportunityId);
			sb.append(",Id=" + Id);
			sb.append(",SortOrder=" + String.valueOf(SortOrder));
			sb.append(",PricebookEntryId=" + PricebookEntryId);
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",Discount=" + String.valueOf(Discount));
			sb.append(",Subtotal=" + String.valueOf(Subtotal));
			sb.append(",TotalPrice=" + String.valueOf(TotalPrice));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",ServiceDate=" + String.valueOf(ServiceDate));
			sb.append(",Description=" + Description);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",LastModifiedDate=" + String.valueOf(LastModifiedDate));
			sb.append(",LastModifiedById=" + LastModifiedById);
			sb.append(",SystemModstamp=" + String.valueOf(SystemModstamp));
			sb.append(",IsDeleted=" + String.valueOf(IsDeleted));
			sb.append(",Valor_unitario_com_desconto__c="
					+ String.valueOf(Valor_unitario_com_desconto__c));
			sb.append(",Quantidade_cotada__c="
					+ String.valueOf(Quantidade_cotada__c));
			sb.append(",Quantidade_consumida__c="
					+ String.valueOf(Quantidade_consumida__c));
			sb.append(",Quantidade_integracao__c=" + Quantidade_integracao__c);
			sb.append(",Valor_consumido__c="
					+ String.valueOf(Valor_consumido__c));
			sb.append(",Valor_a_ser_enviado__c="
					+ String.valueOf(Valor_a_ser_enviado__c));
			sb.append(",Preco__c=" + String.valueOf(Preco__c));
			sb.append(",Product2Name__c=" + Product2Name__c);
			sb.append(",HospitalID__c=" + HospitalID__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tSalesforceInput_2Struct implements
			routines.system.IPersistableRow<after_tSalesforceInput_2Struct> {
		final static byte[] commonByteArrayLock_OSSIS_V1_impsf_exptempcsv = new byte[0];
		static byte[] commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[0];

		public String OpportunityId;

		public String getOpportunityId() {
			return this.OpportunityId;
		}

		public String Id;

		public String getId() {
			return this.Id;
		}

		public Integer SortOrder;

		public Integer getSortOrder() {
			return this.SortOrder;
		}

		public String PricebookEntryId;

		public String getPricebookEntryId() {
			return this.PricebookEntryId;
		}

		public double Quantity;

		public double getQuantity() {
			return this.Quantity;
		}

		public Double Discount;

		public Double getDiscount() {
			return this.Discount;
		}

		public Double Subtotal;

		public Double getSubtotal() {
			return this.Subtotal;
		}

		public Double TotalPrice;

		public Double getTotalPrice() {
			return this.TotalPrice;
		}

		public Double UnitPrice;

		public Double getUnitPrice() {
			return this.UnitPrice;
		}

		public Double ListPrice;

		public Double getListPrice() {
			return this.ListPrice;
		}

		public java.util.Date ServiceDate;

		public java.util.Date getServiceDate() {
			return this.ServiceDate;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public java.util.Date LastModifiedDate;

		public java.util.Date getLastModifiedDate() {
			return this.LastModifiedDate;
		}

		public String LastModifiedById;

		public String getLastModifiedById() {
			return this.LastModifiedById;
		}

		public java.util.Date SystemModstamp;

		public java.util.Date getSystemModstamp() {
			return this.SystemModstamp;
		}

		public boolean IsDeleted;

		public boolean getIsDeleted() {
			return this.IsDeleted;
		}

		public Double Valor_unitario_com_desconto__c;

		public Double getValor_unitario_com_desconto__c() {
			return this.Valor_unitario_com_desconto__c;
		}

		public Double Quantidade_cotada__c;

		public Double getQuantidade_cotada__c() {
			return this.Quantidade_cotada__c;
		}

		public Double Quantidade_consumida__c;

		public Double getQuantidade_consumida__c() {
			return this.Quantidade_consumida__c;
		}

		public String Quantidade_integracao__c;

		public String getQuantidade_integracao__c() {
			return this.Quantidade_integracao__c;
		}

		public Double Valor_consumido__c;

		public Double getValor_consumido__c() {
			return this.Valor_consumido__c;
		}

		public Double Valor_a_ser_enviado__c;

		public Double getValor_a_ser_enviado__c() {
			return this.Valor_a_ser_enviado__c;
		}

		public Double Preco__c;

		public Double getPreco__c() {
			return this.Preco__c;
		}

		public String Product2Name__c;

		public String getProduct2Name__c() {
			return this.Product2Name__c;
		}

		public String HospitalID__c;

		public String getHospitalID__c() {
			return this.HospitalID__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OSSIS_V1_impsf_exptempcsv.length) {
					if (length < 1024
							&& commonByteArray_OSSIS_V1_impsf_exptempcsv.length == 0) {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[1024];
					} else {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OSSIS_V1_impsf_exptempcsv, 0,
						length);
				strReturn = new String(
						commonByteArray_OSSIS_V1_impsf_exptempcsv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OSSIS_V1_impsf_exptempcsv) {

				try {

					int length = 0;

					this.OpportunityId = readString(dis);

					this.Id = readString(dis);

					this.SortOrder = readInteger(dis);

					this.PricebookEntryId = readString(dis);

					this.Quantity = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.Discount = null;
					} else {
						this.Discount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Subtotal = null;
					} else {
						this.Subtotal = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalPrice = null;
					} else {
						this.TotalPrice = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UnitPrice = null;
					} else {
						this.UnitPrice = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ListPrice = null;
					} else {
						this.ListPrice = dis.readDouble();
					}

					this.ServiceDate = readDate(dis);

					this.Description = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.LastModifiedDate = readDate(dis);

					this.LastModifiedById = readString(dis);

					this.SystemModstamp = readDate(dis);

					this.IsDeleted = dis.readBoolean();

					length = dis.readByte();
					if (length == -1) {
						this.Valor_unitario_com_desconto__c = null;
					} else {
						this.Valor_unitario_com_desconto__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantidade_cotada__c = null;
					} else {
						this.Quantidade_cotada__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantidade_consumida__c = null;
					} else {
						this.Quantidade_consumida__c = dis.readDouble();
					}

					this.Quantidade_integracao__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valor_consumido__c = null;
					} else {
						this.Valor_consumido__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Valor_a_ser_enviado__c = null;
					} else {
						this.Valor_a_ser_enviado__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Preco__c = null;
					} else {
						this.Preco__c = dis.readDouble();
					}

					this.Product2Name__c = readString(dis);

					this.HospitalID__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OpportunityId, dos);

				// String

				writeString(this.Id, dos);

				// Integer

				writeInteger(this.SortOrder, dos);

				// String

				writeString(this.PricebookEntryId, dos);

				// double

				dos.writeDouble(this.Quantity);

				// Double

				if (this.Discount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Discount);
				}

				// Double

				if (this.Subtotal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Subtotal);
				}

				// Double

				if (this.TotalPrice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TotalPrice);
				}

				// Double

				if (this.UnitPrice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.UnitPrice);
				}

				// Double

				if (this.ListPrice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ListPrice);
				}

				// java.util.Date

				writeDate(this.ServiceDate, dos);

				// String

				writeString(this.Description, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// java.util.Date

				writeDate(this.LastModifiedDate, dos);

				// String

				writeString(this.LastModifiedById, dos);

				// java.util.Date

				writeDate(this.SystemModstamp, dos);

				// boolean

				dos.writeBoolean(this.IsDeleted);

				// Double

				if (this.Valor_unitario_com_desconto__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_unitario_com_desconto__c);
				}

				// Double

				if (this.Quantidade_cotada__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Quantidade_cotada__c);
				}

				// Double

				if (this.Quantidade_consumida__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Quantidade_consumida__c);
				}

				// String

				writeString(this.Quantidade_integracao__c, dos);

				// Double

				if (this.Valor_consumido__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_consumido__c);
				}

				// Double

				if (this.Valor_a_ser_enviado__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_a_ser_enviado__c);
				}

				// Double

				if (this.Preco__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Preco__c);
				}

				// String

				writeString(this.Product2Name__c, dos);

				// String

				writeString(this.HospitalID__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OpportunityId=" + OpportunityId);
			sb.append(",Id=" + Id);
			sb.append(",SortOrder=" + String.valueOf(SortOrder));
			sb.append(",PricebookEntryId=" + PricebookEntryId);
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",Discount=" + String.valueOf(Discount));
			sb.append(",Subtotal=" + String.valueOf(Subtotal));
			sb.append(",TotalPrice=" + String.valueOf(TotalPrice));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",ServiceDate=" + String.valueOf(ServiceDate));
			sb.append(",Description=" + Description);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",LastModifiedDate=" + String.valueOf(LastModifiedDate));
			sb.append(",LastModifiedById=" + LastModifiedById);
			sb.append(",SystemModstamp=" + String.valueOf(SystemModstamp));
			sb.append(",IsDeleted=" + String.valueOf(IsDeleted));
			sb.append(",Valor_unitario_com_desconto__c="
					+ String.valueOf(Valor_unitario_com_desconto__c));
			sb.append(",Quantidade_cotada__c="
					+ String.valueOf(Quantidade_cotada__c));
			sb.append(",Quantidade_consumida__c="
					+ String.valueOf(Quantidade_consumida__c));
			sb.append(",Quantidade_integracao__c=" + Quantidade_integracao__c);
			sb.append(",Valor_consumido__c="
					+ String.valueOf(Valor_consumido__c));
			sb.append(",Valor_a_ser_enviado__c="
					+ String.valueOf(Valor_a_ser_enviado__c));
			sb.append(",Preco__c=" + String.valueOf(Preco__c));
			sb.append(",Product2Name__c=" + Product2Name__c);
			sb.append(",HospitalID__c=" + HospitalID__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tSalesforceInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tSetGlobalVar_1Process(globalMap);

				row2Struct row2 = new row2Struct();
				exportando_prodsStruct exportando_prods = new exportando_prodsStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"D:/TOTVs 11/Microsiga/Protheus/Protheus_Data/system/integracao/integracao/tmp/produtos_temporarios.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1",
						isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1",
						filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				exportando_prodsStruct exportando_prods_tmp = new exportando_prodsStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tSalesforceInput_2 begin ] start
				 */

				ok_Hash.put("tSalesforceInput_2", false);
				start_Hash
						.put("tSalesforceInput_2", System.currentTimeMillis());

				currentComponent = "tSalesforceInput_2";

				int tos_count_tSalesforceInput_2 = 0;

				int nb_line_tSalesforceInput_2 = 0;
				int limit_tSalesforceInput_2 = -1;
				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");
				org.talend.salesforce.SforceConnection sforceConn_tSalesforceInput_2 = null;

				final String decryptedPassword_tSalesforceInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("aab59c75063e37111a66003c431306f2f8f65439028b5006e6531b245e3d2f3507b7d1205c4ef7ca");
				sforceConn_tSalesforceInput_2 = new org.talend.salesforce.SforceBasicConnection.Builder(
						"https://www.salesforce.com/services/Soap/u/25.0",
						"fernando.lobato@ossis.com.br",
						decryptedPassword_tSalesforceInput_2).setTimeout(60000)
						.needCompression(false)

						.useHttpChunked(false).build();

				org.talend.salesforce.SforceManagement sfMgr_tSalesforceInput_2 = new org.talend.salesforce.SforceManagementImpl(
						sforceConn_tSalesforceInput_2);

				StringBuilder sql_tSalesforceInput_2 = new StringBuilder(
						"select OpportunityId, Product2Name__c, Quantidade_integracao__c, Valor_unitario_com_desconto__c, HospitalID__c from OpportunityLineItem where Quantidade_integracao__c > 0");

				String condition_tSalesforceInput_2 = null;
				if (condition_tSalesforceInput_2 != null
						&& !("".equals(condition_tSalesforceInput_2))) {
					sql_tSalesforceInput_2.append(" where ").append(
							condition_tSalesforceInput_2);
				}

				com.salesforce.soap.partner.QueryResult qr_tSalesforceInput_2 = null;

				qr_tSalesforceInput_2 = sfMgr_tSalesforceInput_2.query(
						sql_tSalesforceInput_2.toString(), new Integer(250));

				org.talend.salesforce.TopConfig.VALUE_DELIMITER = ";";
				org.talend.salesforce.TopConfig.COLUMNNAME_DELIMTER = "_";

				org.talend.salesforce.TopQueryResult topqr_tSalesforceInput_2 = null;
				topqr_tSalesforceInput_2 = new org.talend.salesforce.TopQueryResult();
				topqr_tSalesforceInput_2
						.processTopQueryResult(qr_tSalesforceInput_2);

				boolean bContinue_tSalesforceInput_2 = true;

				while (bContinue_tSalesforceInput_2
						&& qr_tSalesforceInput_2 != null
						&& qr_tSalesforceInput_2.getRecords() != null) {

					java.util.List<org.talend.salesforce.TopRecord> allTopRecords_tSalesforceInput_2 = topqr_tSalesforceInput_2
							.getAllTopRecords();
					// process the query results
					for (int i_tSalesforceInput_2 = 0; i_tSalesforceInput_2 < allTopRecords_tSalesforceInput_2
							.size(); i_tSalesforceInput_2++) {

						org.talend.salesforce.TopRecord topRecord_tSalesforceInput_2 = allTopRecords_tSalesforceInput_2
								.get(i_tSalesforceInput_2);

						nb_line_tSalesforceInput_2++;
						Object valueObj_tSalesforceInput_2 = null;

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("OpportunityId");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.OpportunityId = value_tSalesforceInput_2;

						} else {
							row2.OpportunityId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Id");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Id = value_tSalesforceInput_2;

						} else {
							row2.Id = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("SortOrder");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.SortOrder = ParserUtils
									.parseTo_Integer(value_tSalesforceInput_2);

						} else {
							row2.SortOrder = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("PricebookEntryId");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.PricebookEntryId = value_tSalesforceInput_2;

						} else {
							row2.PricebookEntryId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Quantity");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Quantity = ParserUtils
									.parseTo_double(value_tSalesforceInput_2);

						} else {
							row2.Quantity = 0;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Discount");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Discount = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Discount = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Subtotal");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Subtotal = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Subtotal = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("TotalPrice");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.TotalPrice = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.TotalPrice = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("UnitPrice");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.UnitPrice = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.UnitPrice = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ListPrice");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ListPrice = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.ListPrice = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ServiceDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ServiceDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2, "yyyy-MM-dd");

						} else {
							row2.ServiceDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Description");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Description = value_tSalesforceInput_2;

						} else {
							row2.Description = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CreatedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CreatedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.CreatedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CreatedById");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CreatedById = value_tSalesforceInput_2;

						} else {
							row2.CreatedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("LastModifiedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.LastModifiedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.LastModifiedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("LastModifiedById");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.LastModifiedById = value_tSalesforceInput_2;

						} else {
							row2.LastModifiedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("SystemModstamp");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.SystemModstamp = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.SystemModstamp = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("IsDeleted");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.IsDeleted = ParserUtils
									.parseTo_boolean(value_tSalesforceInput_2);

						} else {
							row2.IsDeleted = false;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Valor_unitario_com_desconto__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Valor_unitario_com_desconto__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Valor_unitario_com_desconto__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Quantidade_cotada__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Quantidade_cotada__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Quantidade_cotada__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Quantidade_consumida__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Quantidade_consumida__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Quantidade_consumida__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Quantidade_integracao__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Quantidade_integracao__c = value_tSalesforceInput_2;

						} else {
							row2.Quantidade_integracao__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Valor_consumido__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Valor_consumido__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Valor_consumido__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Valor_a_ser_enviado__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Valor_a_ser_enviado__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Valor_a_ser_enviado__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Preco__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Preco__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Preco__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Product2Name__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Product2Name__c = value_tSalesforceInput_2;

						} else {
							row2.Product2Name__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("HospitalID__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.HospitalID__c = value_tSalesforceInput_2;

						} else {
							row2.HospitalID__c = null;
						}

						/**
						 * [tSalesforceInput_2 begin ] stop
						 */

						/**
						 * [tSalesforceInput_2 main ] start
						 */

						currentComponent = "tSalesforceInput_2";

						tos_count_tSalesforceInput_2++;

						/**
						 * [tSalesforceInput_2 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row3HashKey.Id = row2.OpportunityId;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.Id = '"
							// + row3HashKey.Id + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							exportando_prods = null;

							// # Output table : 'exportando_prods'
							// # Filter conditions
							if (

							row3.Id != null

							) {
								exportando_prods_tmp.OpportunityId = row2.OpportunityId;
								exportando_prods_tmp.Product2Name__c = row2.Product2Name__c;
								exportando_prods_tmp.Quantidade_integracao__c = row2.Quantidade_integracao__c;
								exportando_prods_tmp.Valor_unitario_com_desconto__c = row2.Valor_unitario_com_desconto__c;
								exportando_prods_tmp.HospitalID__c = row2.HospitalID__c;
								exportando_prods = exportando_prods_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "exportando_prods"
						if (exportando_prods != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (exportando_prods.OpportunityId != null) {
								sb_tFileOutputDelimited_1
										.append(exportando_prods.OpportunityId);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (exportando_prods.Product2Name__c != null) {
								sb_tFileOutputDelimited_1
										.append(exportando_prods.Product2Name__c);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (exportando_prods.Quantidade_integracao__c != null) {
								sb_tFileOutputDelimited_1
										.append(exportando_prods.Quantidade_integracao__c);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (exportando_prods.Valor_unitario_com_desconto__c != null) {
								sb_tFileOutputDelimited_1
										.append(exportando_prods.Valor_unitario_com_desconto__c);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (exportando_prods.HospitalID__c != null) {
								sb_tFileOutputDelimited_1
										.append(exportando_prods.HospitalID__c);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "exportando_prods"

						/**
						 * [tSalesforceInput_2 end ] start
						 */

						currentComponent = "tSalesforceInput_2";

						// (for salesforce wizard preview)
						if (limit_tSalesforceInput_2 > 0
								&& nb_line_tSalesforceInput_2 >= limit_tSalesforceInput_2) {
							bContinue_tSalesforceInput_2 = false;
							break;
						}

					}
					// handle the loop + 1 problem by checking the most recent
					// queryResult
					if (qr_tSalesforceInput_2.getDone()) {
						bContinue_tSalesforceInput_2 = false;
					} else {
						qr_tSalesforceInput_2 = sfMgr_tSalesforceInput_2
								.queryMore(
										qr_tSalesforceInput_2.getQueryLocator(),
										new Integer(250));
						topqr_tSalesforceInput_2 = new org.talend.salesforce.TopQueryResult();
						topqr_tSalesforceInput_2
								.processTopQueryResult(qr_tSalesforceInput_2);
					}
				}

				sfMgr_tSalesforceInput_2.logout();

				globalMap.put("tSalesforceInput_2_NB_LINE",
						nb_line_tSalesforceInput_2);

				ok_Hash.put("tSalesforceInput_2", true);
				end_Hash.put("tSalesforceInput_2", System.currentTimeMillis());

				/**
				 * [tSalesforceInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1
						&& nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tSalesforceInput_2 finally ] start
				 */

				currentComponent = "tSalesforceInput_2";

				/**
				 * [tSalesforceInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_OSSIS_V1_impsf_exptempcsv = new byte[0];
		static byte[] commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String AccountCNPJ__c;

		public String getAccountCNPJ__c() {
			return this.AccountCNPJ__c;
		}

		public String ConvenioCNPJ__c;

		public String getConvenioCNPJ__c() {
			return this.ConvenioCNPJ__c;
		}

		public String MedicoID__c;

		public String getMedicoID__c() {
			return this.MedicoID__c;
		}

		public String InstrumentadorId__c;

		public String getInstrumentadorId__c() {
			return this.InstrumentadorId__c;
		}

		public String Procedimento__c;

		public String getProcedimento__c() {
			return this.Procedimento__c;
		}

		public String Paciente__c;

		public String getPaciente__c() {
			return this.Paciente__c;
		}

		public String OwnerId__c;

		public String getOwnerId__c() {
			return this.OwnerId__c;
		}

		public java.util.Date CloseDate;

		public java.util.Date getCloseDate() {
			return this.CloseDate;
		}

		public String Hora_da_cirurgia__c;

		public String getHora_da_cirurgia__c() {
			return this.Hora_da_cirurgia__c;
		}

		public java.util.Date Data_de_entrega__c;

		public java.util.Date getData_de_entrega__c() {
			return this.Data_de_entrega__c;
		}

		public java.util.Date Data_de_retirada__c;

		public java.util.Date getData_de_retirada__c() {
			return this.Data_de_retirada__c;
		}

		public String PrazoCodigoPrazo__c;

		public String getPrazoCodigoPrazo__c() {
			return this.PrazoCodigoPrazo__c;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.Id = this.Id;
			other.AccountCNPJ__c = this.AccountCNPJ__c;
			other.ConvenioCNPJ__c = this.ConvenioCNPJ__c;
			other.MedicoID__c = this.MedicoID__c;
			other.InstrumentadorId__c = this.InstrumentadorId__c;
			other.Procedimento__c = this.Procedimento__c;
			other.Paciente__c = this.Paciente__c;
			other.OwnerId__c = this.OwnerId__c;
			other.CloseDate = this.CloseDate;
			other.Hora_da_cirurgia__c = this.Hora_da_cirurgia__c;
			other.Data_de_entrega__c = this.Data_de_entrega__c;
			other.Data_de_retirada__c = this.Data_de_retirada__c;
			other.PrazoCodigoPrazo__c = this.PrazoCodigoPrazo__c;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OSSIS_V1_impsf_exptempcsv.length) {
					if (length < 1024
							&& commonByteArray_OSSIS_V1_impsf_exptempcsv.length == 0) {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[1024];
					} else {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OSSIS_V1_impsf_exptempcsv, 0,
						length);
				strReturn = new String(
						commonByteArray_OSSIS_V1_impsf_exptempcsv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OSSIS_V1_impsf_exptempcsv) {

				try {

					int length = 0;

					this.Id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AccountCNPJ__c = readString(dis, ois);

				this.ConvenioCNPJ__c = readString(dis, ois);

				this.MedicoID__c = readString(dis, ois);

				this.InstrumentadorId__c = readString(dis, ois);

				this.Procedimento__c = readString(dis, ois);

				this.Paciente__c = readString(dis, ois);

				this.OwnerId__c = readString(dis, ois);

				this.CloseDate = readDate(dis, ois);

				this.Hora_da_cirurgia__c = readString(dis, ois);

				this.Data_de_entrega__c = readDate(dis, ois);

				this.Data_de_retirada__c = readDate(dis, ois);

				this.PrazoCodigoPrazo__c = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AccountCNPJ__c, dos, oos);

				writeString(this.ConvenioCNPJ__c, dos, oos);

				writeString(this.MedicoID__c, dos, oos);

				writeString(this.InstrumentadorId__c, dos, oos);

				writeString(this.Procedimento__c, dos, oos);

				writeString(this.Paciente__c, dos, oos);

				writeString(this.OwnerId__c, dos, oos);

				writeDate(this.CloseDate, dos, oos);

				writeString(this.Hora_da_cirurgia__c, dos, oos);

				writeDate(this.Data_de_entrega__c, dos, oos);

				writeDate(this.Data_de_retirada__c, dos, oos);

				writeString(this.PrazoCodigoPrazo__c, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",AccountCNPJ__c=" + AccountCNPJ__c);
			sb.append(",ConvenioCNPJ__c=" + ConvenioCNPJ__c);
			sb.append(",MedicoID__c=" + MedicoID__c);
			sb.append(",InstrumentadorId__c=" + InstrumentadorId__c);
			sb.append(",Procedimento__c=" + Procedimento__c);
			sb.append(",Paciente__c=" + Paciente__c);
			sb.append(",OwnerId__c=" + OwnerId__c);
			sb.append(",CloseDate=" + String.valueOf(CloseDate));
			sb.append(",Hora_da_cirurgia__c=" + Hora_da_cirurgia__c);
			sb.append(",Data_de_entrega__c="
					+ String.valueOf(Data_de_entrega__c));
			sb.append(",Data_de_retirada__c="
					+ String.valueOf(Data_de_retirada__c));
			sb.append(",PrazoCodigoPrazo__c=" + PrazoCodigoPrazo__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class exportando_opStruct implements
			routines.system.IPersistableRow<exportando_opStruct> {
		final static byte[] commonByteArrayLock_OSSIS_V1_impsf_exptempcsv = new byte[0];
		static byte[] commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String AccountCNPJ__c;

		public String getAccountCNPJ__c() {
			return this.AccountCNPJ__c;
		}

		public String ConvenioCNPJ__c;

		public String getConvenioCNPJ__c() {
			return this.ConvenioCNPJ__c;
		}

		public String MedicoID__c;

		public String getMedicoID__c() {
			return this.MedicoID__c;
		}

		public String InstrumentadorId__c;

		public String getInstrumentadorId__c() {
			return this.InstrumentadorId__c;
		}

		public String Procedimento__c;

		public String getProcedimento__c() {
			return this.Procedimento__c;
		}

		public String Paciente__c;

		public String getPaciente__c() {
			return this.Paciente__c;
		}

		public String OwnerId__c;

		public String getOwnerId__c() {
			return this.OwnerId__c;
		}

		public java.util.Date CloseDate;

		public java.util.Date getCloseDate() {
			return this.CloseDate;
		}

		public String Hora_da_cirurgia__c;

		public String getHora_da_cirurgia__c() {
			return this.Hora_da_cirurgia__c;
		}

		public java.util.Date Data_de_entrega__c;

		public java.util.Date getData_de_entrega__c() {
			return this.Data_de_entrega__c;
		}

		public java.util.Date Data_de_retirada__c;

		public java.util.Date getData_de_retirada__c() {
			return this.Data_de_retirada__c;
		}

		public String PrazoCodigoPrazo__c;

		public String getPrazoCodigoPrazo__c() {
			return this.PrazoCodigoPrazo__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OSSIS_V1_impsf_exptempcsv.length) {
					if (length < 1024
							&& commonByteArray_OSSIS_V1_impsf_exptempcsv.length == 0) {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[1024];
					} else {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OSSIS_V1_impsf_exptempcsv, 0,
						length);
				strReturn = new String(
						commonByteArray_OSSIS_V1_impsf_exptempcsv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OSSIS_V1_impsf_exptempcsv) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.AccountCNPJ__c = readString(dis);

					this.ConvenioCNPJ__c = readString(dis);

					this.MedicoID__c = readString(dis);

					this.InstrumentadorId__c = readString(dis);

					this.Procedimento__c = readString(dis);

					this.Paciente__c = readString(dis);

					this.OwnerId__c = readString(dis);

					this.CloseDate = readDate(dis);

					this.Hora_da_cirurgia__c = readString(dis);

					this.Data_de_entrega__c = readDate(dis);

					this.Data_de_retirada__c = readDate(dis);

					this.PrazoCodigoPrazo__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.AccountCNPJ__c, dos);

				// String

				writeString(this.ConvenioCNPJ__c, dos);

				// String

				writeString(this.MedicoID__c, dos);

				// String

				writeString(this.InstrumentadorId__c, dos);

				// String

				writeString(this.Procedimento__c, dos);

				// String

				writeString(this.Paciente__c, dos);

				// String

				writeString(this.OwnerId__c, dos);

				// java.util.Date

				writeDate(this.CloseDate, dos);

				// String

				writeString(this.Hora_da_cirurgia__c, dos);

				// java.util.Date

				writeDate(this.Data_de_entrega__c, dos);

				// java.util.Date

				writeDate(this.Data_de_retirada__c, dos);

				// String

				writeString(this.PrazoCodigoPrazo__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",AccountCNPJ__c=" + AccountCNPJ__c);
			sb.append(",ConvenioCNPJ__c=" + ConvenioCNPJ__c);
			sb.append(",MedicoID__c=" + MedicoID__c);
			sb.append(",InstrumentadorId__c=" + InstrumentadorId__c);
			sb.append(",Procedimento__c=" + Procedimento__c);
			sb.append(",Paciente__c=" + Paciente__c);
			sb.append(",OwnerId__c=" + OwnerId__c);
			sb.append(",CloseDate=" + String.valueOf(CloseDate));
			sb.append(",Hora_da_cirurgia__c=" + Hora_da_cirurgia__c);
			sb.append(",Data_de_entrega__c="
					+ String.valueOf(Data_de_entrega__c));
			sb.append(",Data_de_retirada__c="
					+ String.valueOf(Data_de_retirada__c));
			sb.append(",PrazoCodigoPrazo__c=" + PrazoCodigoPrazo__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(exportando_opStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_OSSIS_V1_impsf_exptempcsv = new byte[0];
		static byte[] commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public boolean IsDeleted;

		public boolean getIsDeleted() {
			return this.IsDeleted;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String RecordTypeId;

		public String getRecordTypeId() {
			return this.RecordTypeId;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public String StageName;

		public String getStageName() {
			return this.StageName;
		}

		public Double Amount;

		public Double getAmount() {
			return this.Amount;
		}

		public Double Probability;

		public Double getProbability() {
			return this.Probability;
		}

		public java.util.Date CloseDate;

		public java.util.Date getCloseDate() {
			return this.CloseDate;
		}

		public String Type;

		public String getType() {
			return this.Type;
		}

		public String NextStep;

		public String getNextStep() {
			return this.NextStep;
		}

		public String LeadSource;

		public String getLeadSource() {
			return this.LeadSource;
		}

		public boolean IsClosed;

		public boolean getIsClosed() {
			return this.IsClosed;
		}

		public boolean IsWon;

		public boolean getIsWon() {
			return this.IsWon;
		}

		public String ForecastCategory;

		public String getForecastCategory() {
			return this.ForecastCategory;
		}

		public String ForecastCategoryName;

		public String getForecastCategoryName() {
			return this.ForecastCategoryName;
		}

		public String CampaignId;

		public String getCampaignId() {
			return this.CampaignId;
		}

		public boolean HasOpportunityLineItem;

		public boolean getHasOpportunityLineItem() {
			return this.HasOpportunityLineItem;
		}

		public String Pricebook2Id;

		public String getPricebook2Id() {
			return this.Pricebook2Id;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public java.util.Date LastModifiedDate;

		public java.util.Date getLastModifiedDate() {
			return this.LastModifiedDate;
		}

		public String LastModifiedById;

		public String getLastModifiedById() {
			return this.LastModifiedById;
		}

		public java.util.Date SystemModstamp;

		public java.util.Date getSystemModstamp() {
			return this.SystemModstamp;
		}

		public java.util.Date LastActivityDate;

		public java.util.Date getLastActivityDate() {
			return this.LastActivityDate;
		}

		public Integer FiscalQuarter;

		public Integer getFiscalQuarter() {
			return this.FiscalQuarter;
		}

		public Integer FiscalYear;

		public Integer getFiscalYear() {
			return this.FiscalYear;
		}

		public String Fiscal;

		public String getFiscal() {
			return this.Fiscal;
		}

		public String SyncedQuoteId;

		public String getSyncedQuoteId() {
			return this.SyncedQuoteId;
		}

		public String Status_da_cirurgia__c;

		public String getStatus_da_cirurgia__c() {
			return this.Status_da_cirurgia__c;
		}

		public String Motivo_da_rejeicao__c;

		public String getMotivo_da_rejeicao__c() {
			return this.Motivo_da_rejeicao__c;
		}

		public String Consumo__c;

		public String getConsumo__c() {
			return this.Consumo__c;
		}

		public java.util.Date Data_de_faturamento__c;

		public java.util.Date getData_de_faturamento__c() {
			return this.Data_de_faturamento__c;
		}

		public String Paciente__c;

		public String getPaciente__c() {
			return this.Paciente__c;
		}

		public String Convenio__c;

		public String getConvenio__c() {
			return this.Convenio__c;
		}

		public String Procedimento__c;

		public String getProcedimento__c() {
			return this.Procedimento__c;
		}

		public String Entregar_material_em__c;

		public String getEntregar_material_em__c() {
			return this.Entregar_material_em__c;
		}

		public String Instrumentador__c;

		public String getInstrumentador__c() {
			return this.Instrumentador__c;
		}

		public String Entregue_a__c;

		public String getEntregue_a__c() {
			return this.Entregue_a__c;
		}

		public String Prazo__c;

		public String getPrazo__c() {
			return this.Prazo__c;
		}

		public Double Valor_Total__c;

		public Double getValor_Total__c() {
			return this.Valor_Total__c;
		}

		public String Faturamento__c;

		public String getFaturamento__c() {
			return this.Faturamento__c;
		}

		public String Medico__c;

		public String getMedico__c() {
			return this.Medico__c;
		}

		public Double Desconto__c;

		public Double getDesconto__c() {
			return this.Desconto__c;
		}

		public java.util.Date Data_de_entrega__c;

		public java.util.Date getData_de_entrega__c() {
			return this.Data_de_entrega__c;
		}

		public java.util.Date Data_de_retirada__c;

		public java.util.Date getData_de_retirada__c() {
			return this.Data_de_retirada__c;
		}

		public String N_ordem_de_compra_do_cliente__c;

		public String getN_ordem_de_compra_do_cliente__c() {
			return this.N_ordem_de_compra_do_cliente__c;
		}

		public String Resp_autorizacao__c;

		public String getResp_autorizacao__c() {
			return this.Resp_autorizacao__c;
		}

		public String Hora_da_cirurgia__c;

		public String getHora_da_cirurgia__c() {
			return this.Hora_da_cirurgia__c;
		}

		public Double DANFE_Venda__c;

		public Double getDANFE_Venda__c() {
			return this.DANFE_Venda__c;
		}

		public String dia_semana_cirurgia__c;

		public String getDia_semana_cirurgia__c() {
			return this.dia_semana_cirurgia__c;
		}

		public String Documento_de_Devolucao__c;

		public String getDocumento_de_Devolucao__c() {
			return this.Documento_de_Devolucao__c;
		}

		public Double Doacao__c;

		public Double getDoacao__c() {
			return this.Doacao__c;
		}

		public String Fases_p_s_cirurgia__c;

		public String getFases_p_s_cirurgia__c() {
			return this.Fases_p_s_cirurgia__c;
		}

		public String Pos_cir_rgico__c;

		public String getPos_cir_rgico__c() {
			return this.Pos_cir_rgico__c;
		}

		public Double Valor_consumido__c;

		public Double getValor_consumido__c() {
			return this.Valor_consumido__c;
		}

		public Double Valor_total_consumido__c;

		public Double getValor_total_consumido__c() {
			return this.Valor_total_consumido__c;
		}

		public Double Valor_a_ser_enviado__c;

		public Double getValor_a_ser_enviado__c() {
			return this.Valor_a_ser_enviado__c;
		}

		public Double Valor_a_ser_enviado_total__c;

		public Double getValor_a_ser_enviado_total__c() {
			return this.Valor_a_ser_enviado_total__c;
		}

		public String Hospital__c;

		public String getHospital__c() {
			return this.Hospital__c;
		}

		public String Observa_es__c;

		public String getObserva_es__c() {
			return this.Observa_es__c;
		}

		public java.util.Date Data_Hora_de_in_cio_da_cirurgia__c;

		public java.util.Date getData_Hora_de_in_cio_da_cirurgia__c() {
			return this.Data_Hora_de_in_cio_da_cirurgia__c;
		}

		public java.util.Date Data_Hora_de_t_rmino_da_cirurgia__c;

		public java.util.Date getData_Hora_de_t_rmino_da_cirurgia__c() {
			return this.Data_Hora_de_t_rmino_da_cirurgia__c;
		}

		public String Coment_rios_da_Cota_o__c;

		public String getComent_rios_da_Cota_o__c() {
			return this.Coment_rios_da_Cota_o__c;
		}

		public boolean Enviado_para_ERP__c;

		public boolean getEnviado_para_ERP__c() {
			return this.Enviado_para_ERP__c;
		}

		public String AccountCNPJ__c;

		public String getAccountCNPJ__c() {
			return this.AccountCNPJ__c;
		}

		public String ConvenioCNPJ__c;

		public String getConvenioCNPJ__c() {
			return this.ConvenioCNPJ__c;
		}

		public String MedicoID__c;

		public String getMedicoID__c() {
			return this.MedicoID__c;
		}

		public String InstrumentadorId__c;

		public String getInstrumentadorId__c() {
			return this.InstrumentadorId__c;
		}

		public String OwnerId__c;

		public String getOwnerId__c() {
			return this.OwnerId__c;
		}

		public String PrazoCodigoPrazo__c;

		public String getPrazoCodigoPrazo__c() {
			return this.PrazoCodigoPrazo__c;
		}

		public String MedicoOwnerID__c;

		public String getMedicoOwnerID__c() {
			return this.MedicoOwnerID__c;
		}

		public boolean Flag_do_Process_Builder__c;

		public boolean getFlag_do_Process_Builder__c() {
			return this.Flag_do_Process_Builder__c;
		}

		public String Pedido_do_cliente__c;

		public String getPedido_do_cliente__c() {
			return this.Pedido_do_cliente__c;
		}

		public String Codigo_de_rastreio__c;

		public String getCodigo_de_rastreio__c() {
			return this.Codigo_de_rastreio__c;
		}

		public java.util.Date Data_do_envio__c;

		public java.util.Date getData_do_envio__c() {
			return this.Data_do_envio__c;
		}

		public String Metodo_de_envio__c;

		public String getMetodo_de_envio__c() {
			return this.Metodo_de_envio__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OSSIS_V1_impsf_exptempcsv.length) {
					if (length < 1024
							&& commonByteArray_OSSIS_V1_impsf_exptempcsv.length == 0) {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[1024];
					} else {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OSSIS_V1_impsf_exptempcsv, 0,
						length);
				strReturn = new String(
						commonByteArray_OSSIS_V1_impsf_exptempcsv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OSSIS_V1_impsf_exptempcsv) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.IsDeleted = dis.readBoolean();

					this.AccountId = readString(dis);

					this.RecordTypeId = readString(dis);

					this.Name = readString(dis);

					this.Description = readString(dis);

					this.StageName = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Amount = null;
					} else {
						this.Amount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Probability = null;
					} else {
						this.Probability = dis.readDouble();
					}

					this.CloseDate = readDate(dis);

					this.Type = readString(dis);

					this.NextStep = readString(dis);

					this.LeadSource = readString(dis);

					this.IsClosed = dis.readBoolean();

					this.IsWon = dis.readBoolean();

					this.ForecastCategory = readString(dis);

					this.ForecastCategoryName = readString(dis);

					this.CampaignId = readString(dis);

					this.HasOpportunityLineItem = dis.readBoolean();

					this.Pricebook2Id = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.LastModifiedDate = readDate(dis);

					this.LastModifiedById = readString(dis);

					this.SystemModstamp = readDate(dis);

					this.LastActivityDate = readDate(dis);

					this.FiscalQuarter = readInteger(dis);

					this.FiscalYear = readInteger(dis);

					this.Fiscal = readString(dis);

					this.SyncedQuoteId = readString(dis);

					this.Status_da_cirurgia__c = readString(dis);

					this.Motivo_da_rejeicao__c = readString(dis);

					this.Consumo__c = readString(dis);

					this.Data_de_faturamento__c = readDate(dis);

					this.Paciente__c = readString(dis);

					this.Convenio__c = readString(dis);

					this.Procedimento__c = readString(dis);

					this.Entregar_material_em__c = readString(dis);

					this.Instrumentador__c = readString(dis);

					this.Entregue_a__c = readString(dis);

					this.Prazo__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valor_Total__c = null;
					} else {
						this.Valor_Total__c = dis.readDouble();
					}

					this.Faturamento__c = readString(dis);

					this.Medico__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Desconto__c = null;
					} else {
						this.Desconto__c = dis.readDouble();
					}

					this.Data_de_entrega__c = readDate(dis);

					this.Data_de_retirada__c = readDate(dis);

					this.N_ordem_de_compra_do_cliente__c = readString(dis);

					this.Resp_autorizacao__c = readString(dis);

					this.Hora_da_cirurgia__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DANFE_Venda__c = null;
					} else {
						this.DANFE_Venda__c = dis.readDouble();
					}

					this.dia_semana_cirurgia__c = readString(dis);

					this.Documento_de_Devolucao__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Doacao__c = null;
					} else {
						this.Doacao__c = dis.readDouble();
					}

					this.Fases_p_s_cirurgia__c = readString(dis);

					this.Pos_cir_rgico__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valor_consumido__c = null;
					} else {
						this.Valor_consumido__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Valor_total_consumido__c = null;
					} else {
						this.Valor_total_consumido__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Valor_a_ser_enviado__c = null;
					} else {
						this.Valor_a_ser_enviado__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Valor_a_ser_enviado_total__c = null;
					} else {
						this.Valor_a_ser_enviado_total__c = dis.readDouble();
					}

					this.Hospital__c = readString(dis);

					this.Observa_es__c = readString(dis);

					this.Data_Hora_de_in_cio_da_cirurgia__c = readDate(dis);

					this.Data_Hora_de_t_rmino_da_cirurgia__c = readDate(dis);

					this.Coment_rios_da_Cota_o__c = readString(dis);

					this.Enviado_para_ERP__c = dis.readBoolean();

					this.AccountCNPJ__c = readString(dis);

					this.ConvenioCNPJ__c = readString(dis);

					this.MedicoID__c = readString(dis);

					this.InstrumentadorId__c = readString(dis);

					this.OwnerId__c = readString(dis);

					this.PrazoCodigoPrazo__c = readString(dis);

					this.MedicoOwnerID__c = readString(dis);

					this.Flag_do_Process_Builder__c = dis.readBoolean();

					this.Pedido_do_cliente__c = readString(dis);

					this.Codigo_de_rastreio__c = readString(dis);

					this.Data_do_envio__c = readDate(dis);

					this.Metodo_de_envio__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// boolean

				dos.writeBoolean(this.IsDeleted);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.RecordTypeId, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Description, dos);

				// String

				writeString(this.StageName, dos);

				// Double

				if (this.Amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amount);
				}

				// Double

				if (this.Probability == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Probability);
				}

				// java.util.Date

				writeDate(this.CloseDate, dos);

				// String

				writeString(this.Type, dos);

				// String

				writeString(this.NextStep, dos);

				// String

				writeString(this.LeadSource, dos);

				// boolean

				dos.writeBoolean(this.IsClosed);

				// boolean

				dos.writeBoolean(this.IsWon);

				// String

				writeString(this.ForecastCategory, dos);

				// String

				writeString(this.ForecastCategoryName, dos);

				// String

				writeString(this.CampaignId, dos);

				// boolean

				dos.writeBoolean(this.HasOpportunityLineItem);

				// String

				writeString(this.Pricebook2Id, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// java.util.Date

				writeDate(this.LastModifiedDate, dos);

				// String

				writeString(this.LastModifiedById, dos);

				// java.util.Date

				writeDate(this.SystemModstamp, dos);

				// java.util.Date

				writeDate(this.LastActivityDate, dos);

				// Integer

				writeInteger(this.FiscalQuarter, dos);

				// Integer

				writeInteger(this.FiscalYear, dos);

				// String

				writeString(this.Fiscal, dos);

				// String

				writeString(this.SyncedQuoteId, dos);

				// String

				writeString(this.Status_da_cirurgia__c, dos);

				// String

				writeString(this.Motivo_da_rejeicao__c, dos);

				// String

				writeString(this.Consumo__c, dos);

				// java.util.Date

				writeDate(this.Data_de_faturamento__c, dos);

				// String

				writeString(this.Paciente__c, dos);

				// String

				writeString(this.Convenio__c, dos);

				// String

				writeString(this.Procedimento__c, dos);

				// String

				writeString(this.Entregar_material_em__c, dos);

				// String

				writeString(this.Instrumentador__c, dos);

				// String

				writeString(this.Entregue_a__c, dos);

				// String

				writeString(this.Prazo__c, dos);

				// Double

				if (this.Valor_Total__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_Total__c);
				}

				// String

				writeString(this.Faturamento__c, dos);

				// String

				writeString(this.Medico__c, dos);

				// Double

				if (this.Desconto__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Desconto__c);
				}

				// java.util.Date

				writeDate(this.Data_de_entrega__c, dos);

				// java.util.Date

				writeDate(this.Data_de_retirada__c, dos);

				// String

				writeString(this.N_ordem_de_compra_do_cliente__c, dos);

				// String

				writeString(this.Resp_autorizacao__c, dos);

				// String

				writeString(this.Hora_da_cirurgia__c, dos);

				// Double

				if (this.DANFE_Venda__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DANFE_Venda__c);
				}

				// String

				writeString(this.dia_semana_cirurgia__c, dos);

				// String

				writeString(this.Documento_de_Devolucao__c, dos);

				// Double

				if (this.Doacao__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Doacao__c);
				}

				// String

				writeString(this.Fases_p_s_cirurgia__c, dos);

				// String

				writeString(this.Pos_cir_rgico__c, dos);

				// Double

				if (this.Valor_consumido__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_consumido__c);
				}

				// Double

				if (this.Valor_total_consumido__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_total_consumido__c);
				}

				// Double

				if (this.Valor_a_ser_enviado__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_a_ser_enviado__c);
				}

				// Double

				if (this.Valor_a_ser_enviado_total__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Valor_a_ser_enviado_total__c);
				}

				// String

				writeString(this.Hospital__c, dos);

				// String

				writeString(this.Observa_es__c, dos);

				// java.util.Date

				writeDate(this.Data_Hora_de_in_cio_da_cirurgia__c, dos);

				// java.util.Date

				writeDate(this.Data_Hora_de_t_rmino_da_cirurgia__c, dos);

				// String

				writeString(this.Coment_rios_da_Cota_o__c, dos);

				// boolean

				dos.writeBoolean(this.Enviado_para_ERP__c);

				// String

				writeString(this.AccountCNPJ__c, dos);

				// String

				writeString(this.ConvenioCNPJ__c, dos);

				// String

				writeString(this.MedicoID__c, dos);

				// String

				writeString(this.InstrumentadorId__c, dos);

				// String

				writeString(this.OwnerId__c, dos);

				// String

				writeString(this.PrazoCodigoPrazo__c, dos);

				// String

				writeString(this.MedicoOwnerID__c, dos);

				// boolean

				dos.writeBoolean(this.Flag_do_Process_Builder__c);

				// String

				writeString(this.Pedido_do_cliente__c, dos);

				// String

				writeString(this.Codigo_de_rastreio__c, dos);

				// java.util.Date

				writeDate(this.Data_do_envio__c, dos);

				// String

				writeString(this.Metodo_de_envio__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",IsDeleted=" + String.valueOf(IsDeleted));
			sb.append(",AccountId=" + AccountId);
			sb.append(",RecordTypeId=" + RecordTypeId);
			sb.append(",Name=" + Name);
			sb.append(",Description=" + Description);
			sb.append(",StageName=" + StageName);
			sb.append(",Amount=" + String.valueOf(Amount));
			sb.append(",Probability=" + String.valueOf(Probability));
			sb.append(",CloseDate=" + String.valueOf(CloseDate));
			sb.append(",Type=" + Type);
			sb.append(",NextStep=" + NextStep);
			sb.append(",LeadSource=" + LeadSource);
			sb.append(",IsClosed=" + String.valueOf(IsClosed));
			sb.append(",IsWon=" + String.valueOf(IsWon));
			sb.append(",ForecastCategory=" + ForecastCategory);
			sb.append(",ForecastCategoryName=" + ForecastCategoryName);
			sb.append(",CampaignId=" + CampaignId);
			sb.append(",HasOpportunityLineItem="
					+ String.valueOf(HasOpportunityLineItem));
			sb.append(",Pricebook2Id=" + Pricebook2Id);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",LastModifiedDate=" + String.valueOf(LastModifiedDate));
			sb.append(",LastModifiedById=" + LastModifiedById);
			sb.append(",SystemModstamp=" + String.valueOf(SystemModstamp));
			sb.append(",LastActivityDate=" + String.valueOf(LastActivityDate));
			sb.append(",FiscalQuarter=" + String.valueOf(FiscalQuarter));
			sb.append(",FiscalYear=" + String.valueOf(FiscalYear));
			sb.append(",Fiscal=" + Fiscal);
			sb.append(",SyncedQuoteId=" + SyncedQuoteId);
			sb.append(",Status_da_cirurgia__c=" + Status_da_cirurgia__c);
			sb.append(",Motivo_da_rejeicao__c=" + Motivo_da_rejeicao__c);
			sb.append(",Consumo__c=" + Consumo__c);
			sb.append(",Data_de_faturamento__c="
					+ String.valueOf(Data_de_faturamento__c));
			sb.append(",Paciente__c=" + Paciente__c);
			sb.append(",Convenio__c=" + Convenio__c);
			sb.append(",Procedimento__c=" + Procedimento__c);
			sb.append(",Entregar_material_em__c=" + Entregar_material_em__c);
			sb.append(",Instrumentador__c=" + Instrumentador__c);
			sb.append(",Entregue_a__c=" + Entregue_a__c);
			sb.append(",Prazo__c=" + Prazo__c);
			sb.append(",Valor_Total__c=" + String.valueOf(Valor_Total__c));
			sb.append(",Faturamento__c=" + Faturamento__c);
			sb.append(",Medico__c=" + Medico__c);
			sb.append(",Desconto__c=" + String.valueOf(Desconto__c));
			sb.append(",Data_de_entrega__c="
					+ String.valueOf(Data_de_entrega__c));
			sb.append(",Data_de_retirada__c="
					+ String.valueOf(Data_de_retirada__c));
			sb.append(",N_ordem_de_compra_do_cliente__c="
					+ N_ordem_de_compra_do_cliente__c);
			sb.append(",Resp_autorizacao__c=" + Resp_autorizacao__c);
			sb.append(",Hora_da_cirurgia__c=" + Hora_da_cirurgia__c);
			sb.append(",DANFE_Venda__c=" + String.valueOf(DANFE_Venda__c));
			sb.append(",dia_semana_cirurgia__c=" + dia_semana_cirurgia__c);
			sb.append(",Documento_de_Devolucao__c=" + Documento_de_Devolucao__c);
			sb.append(",Doacao__c=" + String.valueOf(Doacao__c));
			sb.append(",Fases_p_s_cirurgia__c=" + Fases_p_s_cirurgia__c);
			sb.append(",Pos_cir_rgico__c=" + Pos_cir_rgico__c);
			sb.append(",Valor_consumido__c="
					+ String.valueOf(Valor_consumido__c));
			sb.append(",Valor_total_consumido__c="
					+ String.valueOf(Valor_total_consumido__c));
			sb.append(",Valor_a_ser_enviado__c="
					+ String.valueOf(Valor_a_ser_enviado__c));
			sb.append(",Valor_a_ser_enviado_total__c="
					+ String.valueOf(Valor_a_ser_enviado_total__c));
			sb.append(",Hospital__c=" + Hospital__c);
			sb.append(",Observa_es__c=" + Observa_es__c);
			sb.append(",Data_Hora_de_in_cio_da_cirurgia__c="
					+ String.valueOf(Data_Hora_de_in_cio_da_cirurgia__c));
			sb.append(",Data_Hora_de_t_rmino_da_cirurgia__c="
					+ String.valueOf(Data_Hora_de_t_rmino_da_cirurgia__c));
			sb.append(",Coment_rios_da_Cota_o__c=" + Coment_rios_da_Cota_o__c);
			sb.append(",Enviado_para_ERP__c="
					+ String.valueOf(Enviado_para_ERP__c));
			sb.append(",AccountCNPJ__c=" + AccountCNPJ__c);
			sb.append(",ConvenioCNPJ__c=" + ConvenioCNPJ__c);
			sb.append(",MedicoID__c=" + MedicoID__c);
			sb.append(",InstrumentadorId__c=" + InstrumentadorId__c);
			sb.append(",OwnerId__c=" + OwnerId__c);
			sb.append(",PrazoCodigoPrazo__c=" + PrazoCodigoPrazo__c);
			sb.append(",MedicoOwnerID__c=" + MedicoOwnerID__c);
			sb.append(",Flag_do_Process_Builder__c="
					+ String.valueOf(Flag_do_Process_Builder__c));
			sb.append(",Pedido_do_cliente__c=" + Pedido_do_cliente__c);
			sb.append(",Codigo_de_rastreio__c=" + Codigo_de_rastreio__c);
			sb.append(",Data_do_envio__c=" + String.valueOf(Data_do_envio__c));
			sb.append(",Metodo_de_envio__c=" + Metodo_de_envio__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				exportando_opStruct exportando_op = new exportando_opStruct();
				exportando_opStruct row3 = exportando_op;

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tFileOutputDelimited_2 - inputs:(exportando_op)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_2 - inputs:(row2,row3)
				// outputs:(exportando_prods)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"D:/TOTVs 11/Microsiga/Protheus/Protheus_Data/system/integracao/integracao/tmp/oportunidades_temporarias.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								"ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2",
						isFileGenerated_tFileOutputDelimited_2);
				resourceMap.put("filetFileOutputDelimited_2",
						filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				exportando_opStruct exportando_op_tmp = new exportando_opStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tSalesforceInput_1 begin ] start
				 */

				ok_Hash.put("tSalesforceInput_1", false);
				start_Hash
						.put("tSalesforceInput_1", System.currentTimeMillis());

				currentComponent = "tSalesforceInput_1";

				int tos_count_tSalesforceInput_1 = 0;

				int nb_line_tSalesforceInput_1 = 0;
				int limit_tSalesforceInput_1 = -1;
				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");
				org.talend.salesforce.SforceConnection sforceConn_tSalesforceInput_1 = null;

				final String decryptedPassword_tSalesforceInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("aab59c75063e37111a66003c431306f2f8f65439028b5006e6531b245e3d2f3507b7d1205c4ef7ca");
				sforceConn_tSalesforceInput_1 = new org.talend.salesforce.SforceBasicConnection.Builder(
						"https://www.salesforce.com/services/Soap/u/25.0",
						"fernando.lobato@ossis.com.br",
						decryptedPassword_tSalesforceInput_1).setTimeout(60000)
						.needCompression(false)

						.useHttpChunked(false).build();

				org.talend.salesforce.SforceManagement sfMgr_tSalesforceInput_1 = new org.talend.salesforce.SforceManagementImpl(
						sforceConn_tSalesforceInput_1);

				StringBuilder sql_tSalesforceInput_1 = new StringBuilder(
						"select Id, AccountCNPJ__c, ConvenioCNPJ__c,	MedicoID__c,	InstrumentadorId__c, Procedimento__c, Paciente__c, OwnerId__c, CloseDate, Hora_da_cirurgia__c, Data_de_entrega__c, Data_de_retirada__c, PrazoCodigoPrazo__c  from Opportunity where StageName = 'Entrega autorizada' and Enviar_para_ERP__c = true and Enviado_para_ERP__c = false");

				String condition_tSalesforceInput_1 = null;
				if (condition_tSalesforceInput_1 != null
						&& !("".equals(condition_tSalesforceInput_1))) {
					sql_tSalesforceInput_1.append(" where ").append(
							condition_tSalesforceInput_1);
				}

				com.salesforce.soap.partner.QueryResult qr_tSalesforceInput_1 = null;

				qr_tSalesforceInput_1 = sfMgr_tSalesforceInput_1.query(
						sql_tSalesforceInput_1.toString(), new Integer(250));

				org.talend.salesforce.TopConfig.VALUE_DELIMITER = ";";
				org.talend.salesforce.TopConfig.COLUMNNAME_DELIMTER = "_";

				org.talend.salesforce.TopQueryResult topqr_tSalesforceInput_1 = null;
				topqr_tSalesforceInput_1 = new org.talend.salesforce.TopQueryResult();
				topqr_tSalesforceInput_1
						.processTopQueryResult(qr_tSalesforceInput_1);

				boolean bContinue_tSalesforceInput_1 = true;

				while (bContinue_tSalesforceInput_1
						&& qr_tSalesforceInput_1 != null
						&& qr_tSalesforceInput_1.getRecords() != null) {

					java.util.List<org.talend.salesforce.TopRecord> allTopRecords_tSalesforceInput_1 = topqr_tSalesforceInput_1
							.getAllTopRecords();
					// process the query results
					for (int i_tSalesforceInput_1 = 0; i_tSalesforceInput_1 < allTopRecords_tSalesforceInput_1
							.size(); i_tSalesforceInput_1++) {

						org.talend.salesforce.TopRecord topRecord_tSalesforceInput_1 = allTopRecords_tSalesforceInput_1
								.get(i_tSalesforceInput_1);

						nb_line_tSalesforceInput_1++;
						Object valueObj_tSalesforceInput_1 = null;

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Id");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Id = value_tSalesforceInput_1;

						} else {
							row1.Id = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("IsDeleted");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.IsDeleted = ParserUtils
									.parseTo_boolean(value_tSalesforceInput_1);

						} else {
							row1.IsDeleted = false;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("AccountId");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.AccountId = value_tSalesforceInput_1;

						} else {
							row1.AccountId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("RecordTypeId");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.RecordTypeId = value_tSalesforceInput_1;

						} else {
							row1.RecordTypeId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Name");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Name = value_tSalesforceInput_1;

						} else {
							row1.Name = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Description");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Description = value_tSalesforceInput_1;

						} else {
							row1.Description = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("StageName");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.StageName = value_tSalesforceInput_1;

						} else {
							row1.StageName = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Amount");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Amount = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Amount = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Probability");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Probability = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Probability = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("CloseDate");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.CloseDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_1, "yyyy-MM-dd");

						} else {
							row1.CloseDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Type");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Type = value_tSalesforceInput_1;

						} else {
							row1.Type = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("NextStep");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.NextStep = value_tSalesforceInput_1;

						} else {
							row1.NextStep = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("LeadSource");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.LeadSource = value_tSalesforceInput_1;

						} else {
							row1.LeadSource = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("IsClosed");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.IsClosed = ParserUtils
									.parseTo_boolean(value_tSalesforceInput_1);

						} else {
							row1.IsClosed = false;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("IsWon");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.IsWon = ParserUtils
									.parseTo_boolean(value_tSalesforceInput_1);

						} else {
							row1.IsWon = false;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("ForecastCategory");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.ForecastCategory = value_tSalesforceInput_1;

						} else {
							row1.ForecastCategory = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("ForecastCategoryName");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.ForecastCategoryName = value_tSalesforceInput_1;

						} else {
							row1.ForecastCategoryName = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("CampaignId");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.CampaignId = value_tSalesforceInput_1;

						} else {
							row1.CampaignId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("HasOpportunityLineItem");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.HasOpportunityLineItem = ParserUtils
									.parseTo_boolean(value_tSalesforceInput_1);

						} else {
							row1.HasOpportunityLineItem = false;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Pricebook2Id");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Pricebook2Id = value_tSalesforceInput_1;

						} else {
							row1.Pricebook2Id = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("OwnerId");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.OwnerId = value_tSalesforceInput_1;

						} else {
							row1.OwnerId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("CreatedDate");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.CreatedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_1,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row1.CreatedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("CreatedById");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.CreatedById = value_tSalesforceInput_1;

						} else {
							row1.CreatedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("LastModifiedDate");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.LastModifiedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_1,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row1.LastModifiedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("LastModifiedById");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.LastModifiedById = value_tSalesforceInput_1;

						} else {
							row1.LastModifiedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("SystemModstamp");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.SystemModstamp = ParserUtils.parseTo_Date(
									value_tSalesforceInput_1,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row1.SystemModstamp = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("LastActivityDate");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.LastActivityDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_1, "yyyy-MM-dd");

						} else {
							row1.LastActivityDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("FiscalQuarter");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.FiscalQuarter = ParserUtils
									.parseTo_Integer(value_tSalesforceInput_1);

						} else {
							row1.FiscalQuarter = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("FiscalYear");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.FiscalYear = ParserUtils
									.parseTo_Integer(value_tSalesforceInput_1);

						} else {
							row1.FiscalYear = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Fiscal");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Fiscal = value_tSalesforceInput_1;

						} else {
							row1.Fiscal = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("SyncedQuoteId");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.SyncedQuoteId = value_tSalesforceInput_1;

						} else {
							row1.SyncedQuoteId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Status_da_cirurgia__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Status_da_cirurgia__c = value_tSalesforceInput_1;

						} else {
							row1.Status_da_cirurgia__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Motivo_da_rejeicao__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Motivo_da_rejeicao__c = value_tSalesforceInput_1;

						} else {
							row1.Motivo_da_rejeicao__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Consumo__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Consumo__c = value_tSalesforceInput_1;

						} else {
							row1.Consumo__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Data_de_faturamento__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Data_de_faturamento__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_1,
											"yyyy-MM-dd");

						} else {
							row1.Data_de_faturamento__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Paciente__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Paciente__c = value_tSalesforceInput_1;

						} else {
							row1.Paciente__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Convenio__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Convenio__c = value_tSalesforceInput_1;

						} else {
							row1.Convenio__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Procedimento__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Procedimento__c = value_tSalesforceInput_1;

						} else {
							row1.Procedimento__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Entregar_material_em__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Entregar_material_em__c = value_tSalesforceInput_1;

						} else {
							row1.Entregar_material_em__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Instrumentador__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Instrumentador__c = value_tSalesforceInput_1;

						} else {
							row1.Instrumentador__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Entregue_a__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Entregue_a__c = value_tSalesforceInput_1;

						} else {
							row1.Entregue_a__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Prazo__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Prazo__c = value_tSalesforceInput_1;

						} else {
							row1.Prazo__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Valor_Total__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Valor_Total__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Valor_Total__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Faturamento__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Faturamento__c = value_tSalesforceInput_1;

						} else {
							row1.Faturamento__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Medico__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Medico__c = value_tSalesforceInput_1;

						} else {
							row1.Medico__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Desconto__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Desconto__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Desconto__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Data_de_entrega__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Data_de_entrega__c = ParserUtils.parseTo_Date(
									value_tSalesforceInput_1, "yyyy-MM-dd");

						} else {
							row1.Data_de_entrega__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Data_de_retirada__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Data_de_retirada__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_1,
											"yyyy-MM-dd");

						} else {
							row1.Data_de_retirada__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("N_ordem_de_compra_do_cliente__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.N_ordem_de_compra_do_cliente__c = value_tSalesforceInput_1;

						} else {
							row1.N_ordem_de_compra_do_cliente__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Resp_autorizacao__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Resp_autorizacao__c = value_tSalesforceInput_1;

						} else {
							row1.Resp_autorizacao__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Hora_da_cirurgia__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Hora_da_cirurgia__c = value_tSalesforceInput_1;

						} else {
							row1.Hora_da_cirurgia__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("DANFE_Venda__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.DANFE_Venda__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.DANFE_Venda__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("dia_semana_cirurgia__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.dia_semana_cirurgia__c = value_tSalesforceInput_1;

						} else {
							row1.dia_semana_cirurgia__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Documento_de_Devolucao__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Documento_de_Devolucao__c = value_tSalesforceInput_1;

						} else {
							row1.Documento_de_Devolucao__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Doacao__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Doacao__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Doacao__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Fases_p_s_cirurgia__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Fases_p_s_cirurgia__c = value_tSalesforceInput_1;

						} else {
							row1.Fases_p_s_cirurgia__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Pos_cir_rgico__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Pos_cir_rgico__c = value_tSalesforceInput_1;

						} else {
							row1.Pos_cir_rgico__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Valor_consumido__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Valor_consumido__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Valor_consumido__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Valor_total_consumido__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Valor_total_consumido__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Valor_total_consumido__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Valor_a_ser_enviado__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Valor_a_ser_enviado__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Valor_a_ser_enviado__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Valor_a_ser_enviado_total__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Valor_a_ser_enviado_total__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_1);

						} else {
							row1.Valor_a_ser_enviado_total__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Hospital__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Hospital__c = value_tSalesforceInput_1;

						} else {
							row1.Hospital__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Observa_es__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Observa_es__c = value_tSalesforceInput_1;

						} else {
							row1.Observa_es__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Data_Hora_de_in_cio_da_cirurgia__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Data_Hora_de_in_cio_da_cirurgia__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_1,
											"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row1.Data_Hora_de_in_cio_da_cirurgia__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Data_Hora_de_t_rmino_da_cirurgia__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Data_Hora_de_t_rmino_da_cirurgia__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_1,
											"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row1.Data_Hora_de_t_rmino_da_cirurgia__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Coment_rios_da_Cota_o__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Coment_rios_da_Cota_o__c = value_tSalesforceInput_1;

						} else {
							row1.Coment_rios_da_Cota_o__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Enviado_para_ERP__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Enviado_para_ERP__c = ParserUtils
									.parseTo_boolean(value_tSalesforceInput_1);

						} else {
							row1.Enviado_para_ERP__c = false;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("AccountCNPJ__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.AccountCNPJ__c = value_tSalesforceInput_1;

						} else {
							row1.AccountCNPJ__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("ConvenioCNPJ__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.ConvenioCNPJ__c = value_tSalesforceInput_1;

						} else {
							row1.ConvenioCNPJ__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("MedicoID__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.MedicoID__c = value_tSalesforceInput_1;

						} else {
							row1.MedicoID__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("InstrumentadorId__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.InstrumentadorId__c = value_tSalesforceInput_1;

						} else {
							row1.InstrumentadorId__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("OwnerId__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.OwnerId__c = value_tSalesforceInput_1;

						} else {
							row1.OwnerId__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("PrazoCodigoPrazo__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.PrazoCodigoPrazo__c = value_tSalesforceInput_1;

						} else {
							row1.PrazoCodigoPrazo__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("MedicoOwnerID__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.MedicoOwnerID__c = value_tSalesforceInput_1;

						} else {
							row1.MedicoOwnerID__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Flag_do_Process_Builder__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Flag_do_Process_Builder__c = ParserUtils
									.parseTo_boolean(value_tSalesforceInput_1);

						} else {
							row1.Flag_do_Process_Builder__c = false;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Pedido_do_cliente__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Pedido_do_cliente__c = value_tSalesforceInput_1;

						} else {
							row1.Pedido_do_cliente__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Codigo_de_rastreio__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Codigo_de_rastreio__c = value_tSalesforceInput_1;

						} else {
							row1.Codigo_de_rastreio__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Data_do_envio__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Data_do_envio__c = ParserUtils.parseTo_Date(
									value_tSalesforceInput_1, "yyyy-MM-dd");

						} else {
							row1.Data_do_envio__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_1 = topRecord_tSalesforceInput_1
								.getValue("Metodo_de_envio__c");
						if (valueObj_tSalesforceInput_1 != null) {
							String value_tSalesforceInput_1 = (String) valueObj_tSalesforceInput_1;

							row1.Metodo_de_envio__c = value_tSalesforceInput_1;

						} else {
							row1.Metodo_de_envio__c = null;
						}

						/**
						 * [tSalesforceInput_1 begin ] stop
						 */

						/**
						 * [tSalesforceInput_1 main ] start
						 */

						currentComponent = "tSalesforceInput_1";

						tos_count_tSalesforceInput_1++;

						/**
						 * [tSalesforceInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							exportando_op = null;

							// # Output table : 'exportando_op'
							exportando_op_tmp.Id = row1.Id;
							exportando_op_tmp.AccountCNPJ__c = row1.AccountCNPJ__c;
							exportando_op_tmp.ConvenioCNPJ__c = row1.ConvenioCNPJ__c;
							exportando_op_tmp.MedicoID__c = row1.MedicoID__c;
							exportando_op_tmp.InstrumentadorId__c = row1.InstrumentadorId__c;
							exportando_op_tmp.Procedimento__c = row1.Procedimento__c;
							exportando_op_tmp.Paciente__c = row1.Paciente__c;
							exportando_op_tmp.OwnerId__c = row1.OwnerId__c;
							exportando_op_tmp.CloseDate = row1.CloseDate;
							exportando_op_tmp.Hora_da_cirurgia__c = row1.Hora_da_cirurgia__c;
							exportando_op_tmp.Data_de_entrega__c = row1.Data_de_entrega__c;
							exportando_op_tmp.Data_de_retirada__c = row1.Data_de_retirada__c;
							exportando_op_tmp.PrazoCodigoPrazo__c = row1.PrazoCodigoPrazo__c;
							exportando_op = exportando_op_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "exportando_op"
						if (exportando_op != null) {

							/**
							 * [tFileOutputDelimited_2 main ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
							if (exportando_op.Id != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.Id);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.AccountCNPJ__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.AccountCNPJ__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.ConvenioCNPJ__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.ConvenioCNPJ__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.MedicoID__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.MedicoID__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.InstrumentadorId__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.InstrumentadorId__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.Procedimento__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.Procedimento__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.Paciente__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.Paciente__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.OwnerId__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.OwnerId__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.CloseDate != null) {
								sb_tFileOutputDelimited_2.append(FormatterUtils
										.format_Date(exportando_op.CloseDate,
												"yyyy-MM-dd"));
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.Hora_da_cirurgia__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.Hora_da_cirurgia__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.Data_de_entrega__c != null) {
								sb_tFileOutputDelimited_2
										.append(FormatterUtils
												.format_Date(
														exportando_op.Data_de_entrega__c,
														"yyyy-MM-dd"));
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.Data_de_retirada__c != null) {
								sb_tFileOutputDelimited_2
										.append(FormatterUtils
												.format_Date(
														exportando_op.Data_de_retirada__c,
														"yyyy-MM-dd"));
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (exportando_op.PrazoCodigoPrazo__c != null) {
								sb_tFileOutputDelimited_2
										.append(exportando_op.PrazoCodigoPrazo__c);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

							nb_line_tFileOutputDelimited_2++;
							resourceMap.put("nb_line_tFileOutputDelimited_2",
									nb_line_tFileOutputDelimited_2);

							outtFileOutputDelimited_2
									.write(sb_tFileOutputDelimited_2.toString());

							row3 = exportando_op;

							tos_count_tFileOutputDelimited_2++;

							/**
							 * [tFileOutputDelimited_2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row3 main ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							row3Struct row3_HashRow = new row3Struct();

							row3_HashRow.Id = row3.Id;

							row3_HashRow.AccountCNPJ__c = row3.AccountCNPJ__c;

							row3_HashRow.ConvenioCNPJ__c = row3.ConvenioCNPJ__c;

							row3_HashRow.MedicoID__c = row3.MedicoID__c;

							row3_HashRow.InstrumentadorId__c = row3.InstrumentadorId__c;

							row3_HashRow.Procedimento__c = row3.Procedimento__c;

							row3_HashRow.Paciente__c = row3.Paciente__c;

							row3_HashRow.OwnerId__c = row3.OwnerId__c;

							row3_HashRow.CloseDate = row3.CloseDate;

							row3_HashRow.Hora_da_cirurgia__c = row3.Hora_da_cirurgia__c;

							row3_HashRow.Data_de_entrega__c = row3.Data_de_entrega__c;

							row3_HashRow.Data_de_retirada__c = row3.Data_de_retirada__c;

							row3_HashRow.PrazoCodigoPrazo__c = row3.PrazoCodigoPrazo__c;

							tHash_Lookup_row3.put(row3_HashRow);

							tos_count_tAdvancedHash_row3++;

							/**
							 * [tAdvancedHash_row3 main ] stop
							 */

						} // End of branch "exportando_op"

						/**
						 * [tSalesforceInput_1 end ] start
						 */

						currentComponent = "tSalesforceInput_1";

						// (for salesforce wizard preview)
						if (limit_tSalesforceInput_1 > 0
								&& nb_line_tSalesforceInput_1 >= limit_tSalesforceInput_1) {
							bContinue_tSalesforceInput_1 = false;
							break;
						}

					}
					// handle the loop + 1 problem by checking the most recent
					// queryResult
					if (qr_tSalesforceInput_1.getDone()) {
						bContinue_tSalesforceInput_1 = false;
					} else {
						qr_tSalesforceInput_1 = sfMgr_tSalesforceInput_1
								.queryMore(
										qr_tSalesforceInput_1.getQueryLocator(),
										new Integer(250));
						topqr_tSalesforceInput_1 = new org.talend.salesforce.TopQueryResult();
						topqr_tSalesforceInput_1
								.processTopQueryResult(qr_tSalesforceInput_1);
					}
				}

				sfMgr_tSalesforceInput_1.logout();

				globalMap.put("tSalesforceInput_1_NB_LINE",
						nb_line_tSalesforceInput_1);

				ok_Hash.put("tSalesforceInput_1", true);
				end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());

				/**
				 * [tSalesforceInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2
						&& nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceInput_1 finally ] start
				 */

				currentComponent = "tSalesforceInput_1";

				/**
				 * [tSalesforceInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}

	public void tSetGlobalVar_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("timestamp",
						TalendDate.getDate("yyyy-MM-dd kk.mm.ss "));

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tSalesforceInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public static class error_csvStruct implements
			routines.system.IPersistableRow<error_csvStruct> {
		final static byte[] commonByteArrayLock_OSSIS_V1_impsf_exptempcsv = new byte[0];
		static byte[] commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[0];

		public String Fase;

		public String getFase() {
			return this.Fase;
		}

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OSSIS_V1_impsf_exptempcsv.length) {
					if (length < 1024
							&& commonByteArray_OSSIS_V1_impsf_exptempcsv.length == 0) {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[1024];
					} else {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OSSIS_V1_impsf_exptempcsv, 0,
						length);
				strReturn = new String(
						commonByteArray_OSSIS_V1_impsf_exptempcsv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OSSIS_V1_impsf_exptempcsv) {

				try {

					int length = 0;

					this.Fase = readString(dis);

					this.moment = readDate(dis);

					this.message = readString(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Fase, dos);

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.message, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Fase=" + Fase);
			sb.append(",moment=" + String.valueOf(moment));
			sb.append(",message=" + message);
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(error_csvStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_OSSIS_V1_impsf_exptempcsv = new byte[0];
		static byte[] commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OSSIS_V1_impsf_exptempcsv.length) {
					if (length < 1024
							&& commonByteArray_OSSIS_V1_impsf_exptempcsv.length == 0) {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[1024];
					} else {
						commonByteArray_OSSIS_V1_impsf_exptempcsv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OSSIS_V1_impsf_exptempcsv, 0,
						length);
				strReturn = new String(
						commonByteArray_OSSIS_V1_impsf_exptempcsv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OSSIS_V1_impsf_exptempcsv) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				error_csvStruct error_csv = new error_csvStruct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"D:/TOTVs 11/Microsiga/Protheus/Protheus_Data/system/integracao/integracao/errosf/LogError "
								+ ((String) globalMap.get("timestamp"))
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, false),
								"ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("Fase");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("moment");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("message");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("type");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("origin");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_3",
						isFileGenerated_tFileOutputDelimited_3);
				resourceMap.put("filetFileOutputDelimited_3",
						filetFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				error_csvStruct error_csv_tmp = new error_csvStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row4.type = lcm.getType();
					row4.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row4.priority = lcm.getPriority();
					row4.message = lcm.getMessage();
					row4.code = lcm.getCode();

					row4.moment = java.util.Calendar.getInstance().getTime();

					row4.pid = pid;
					row4.root_pid = rootPid;
					row4.father_pid = fatherPid;

					row4.project = projectName;
					row4.job = jobName;
					row4.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						error_csv = null;

						// # Output table : 'error_csv'
						error_csv_tmp.Fase = "Conexão e Leitura";
						error_csv_tmp.moment = row4.moment;
						error_csv_tmp.message = row4.message;
						error_csv_tmp.type = row4.type;
						error_csv_tmp.origin = row4.origin;
						error_csv = error_csv_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "error_csv"
					if (error_csv != null) {

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						if (error_csv.Fase != null) {
							sb_tFileOutputDelimited_3.append(error_csv.Fase);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (error_csv.moment != null) {
							sb_tFileOutputDelimited_3.append(FormatterUtils
									.format_Date(error_csv.moment,
											"yyyy-MM-dd HH:mm:ss"));
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (error_csv.message != null) {
							sb_tFileOutputDelimited_3.append(error_csv.message);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (error_csv.type != null) {
							sb_tFileOutputDelimited_3.append(error_csv.type);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (error_csv.origin != null) {
							sb_tFileOutputDelimited_3.append(error_csv.origin);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3",
								nb_line_tFileOutputDelimited_3);

						outtFileOutputDelimited_3
								.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

					} // End of branch "error_csv"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				if (isFileGenerated_tFileOutputDelimited_3
						&& nb_line_tFileOutputDelimited_3 == 0) {

					filetFileOutputDelimited_3.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_3")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_3"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_3")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final impsf_exptempcsv impsf_exptempcsvClass = new impsf_exptempcsv();

		int exitCode = impsf_exptempcsvClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = impsf_exptempcsv.class
					.getClassLoader().getResourceAsStream(
							"ossis_v1/impsf_exptempcsv_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tSalesforceInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSalesforceInput_2) {
			globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", -1);

			e_tSalesforceInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : impsf_exptempcsv");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 230270 characters generated by Talend Open Studio for Data Integration on the
 * 21 de Maio de 2016 11h30min41s BRT
 ************************************************************************************************/
